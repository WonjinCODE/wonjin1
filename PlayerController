using UnityEngine;

public class PlayerController : MonoBehaviour
{
    public float moveSpeed = 5f;
    public float jumpForce = 10f;

    private Rigidbody2D rb;
    private bool isGrounded;

    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
    }

    void Update()
    {
        // 이동
        float moveHorizontal = Input.GetAxis("Horizontal");
        float moveVertical = Input.GetAxis("Vertical");
        Vector2 movement = new Vector2(moveHorizontal, moveVertical);
        rb.velocity = movement * moveSpeed;

        // 점프
        if (Input.GetKeyDown(KeyCode.Space) && isGrounded)
        {
            rb.AddForce(Vector2.up * jumpForce, ForceMode2D.Impulse);
            isGrounded = false;
        }

        {
        // 대쉬 입력 감지
        if (Input.GetKeyDown(KeyCode.A) || Input.GetKeyDown(KeyCode.D))
        {
            // 이전 대쉬 입력 후의 시간과 현재 시간의 차이가 대쉬 쿨다운보다 작으면 대쉬 불가
            if (Time.time - lastDashTime < dashCooldown)
                return;

            // 이전 대쉬 입력 후의 시간 초기화
            lastDashTime = Time.time;

            // 현재 입력된 방향에 따라 대쉬
            if (Input.GetKeyDown(KeyCode.A))
            {
                Dash(Vector2.left);
            }
            else if (Input.GetKeyDown(KeyCode.D))
            {
                Dash(Vector2.right);
            }
        }
    }

    void Dash(Vector2 direction)
    {
        // 대쉬 상태 설정
        isDashing = true;
        // 대쉬 지속 시간 후에 대쉬 종료
        Invoke("EndDash", dashDuration);
        // 대쉬 힘 적용
        rb.velocity = direction * dashForce;
    }

    void EndDash()
    {
        // 대쉬 상태 해제
        isDashing = false;
        // 대쉬 후에 속도 초기화
        rb.velocity = Vector2.zero;
    }

    // 땅 체크
        isGrounded = Physics2D.OverlapCircle(groundCheck.position, groundCheckRadius, groundLayer);

        // 더블 점프 가능 여부 업데이트
        if (isGrounded)
        {
            canDoubleJump = true;
        }

        // 점프 입력
        if (Input.GetKeyDown(KeyCode.Space))
        {
            if (isGrounded)
            {
                Jump(jumpForce);
            }
            else if (canDoubleJump)
            {
                Jump(doubleJumpForce);
                canDoubleJump = false;
            }
        }
    }

    void Jump(float force)
    {
        rb.velocity = new Vector2(rb.velocity.x, 0f); // 수직 방향 속도 초기화
        rb.AddForce(Vector2.up * force, ForceMode2D.Impulse); // 점프 힘 적용
    }
}
}
    

    void OnCollisionEnter2D(Collision2D collision)
    {
        // 바닥에 닿았을 때
        if (collision.gameObject.CompareTag("Ground"))
        {
            isGrounded = true;
        }
    }
}
